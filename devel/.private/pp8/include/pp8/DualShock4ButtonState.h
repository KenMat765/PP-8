// Generated by gencpp from file pp8/DualShock4ButtonState.msg
// DO NOT EDIT!


#ifndef PP8_MESSAGE_DUALSHOCK4BUTTONSTATE_H
#define PP8_MESSAGE_DUALSHOCK4BUTTONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace pp8
{
template <class ContainerAllocator>
struct DualShock4ButtonState_
{
  typedef DualShock4ButtonState_<ContainerAllocator> Type;

  DualShock4ButtonState_()
    : square()
    , cross()
    , circle()
    , triangle()
    , L1()
    , L2()
    , R1()
    , R2()
    , option()  {
    }
  DualShock4ButtonState_(const ContainerAllocator& _alloc)
    : square(_alloc)
    , cross(_alloc)
    , circle(_alloc)
    , triangle(_alloc)
    , L1(_alloc)
    , L2(_alloc)
    , R1(_alloc)
    , R2(_alloc)
    , option(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _square_type;
  _square_type square;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _cross_type;
  _cross_type cross;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _circle_type;
  _circle_type circle;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _triangle_type;
  _triangle_type triangle;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _L1_type;
  _L1_type L1;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _L2_type;
  _L2_type L2;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _R1_type;
  _R1_type R1;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _R2_type;
  _R2_type R2;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _option_type;
  _option_type option;





  typedef boost::shared_ptr< ::pp8::DualShock4ButtonState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pp8::DualShock4ButtonState_<ContainerAllocator> const> ConstPtr;

}; // struct DualShock4ButtonState_

typedef ::pp8::DualShock4ButtonState_<std::allocator<void> > DualShock4ButtonState;

typedef boost::shared_ptr< ::pp8::DualShock4ButtonState > DualShock4ButtonStatePtr;
typedef boost::shared_ptr< ::pp8::DualShock4ButtonState const> DualShock4ButtonStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pp8::DualShock4ButtonState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pp8::DualShock4ButtonState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pp8::DualShock4ButtonState_<ContainerAllocator1> & lhs, const ::pp8::DualShock4ButtonState_<ContainerAllocator2> & rhs)
{
  return lhs.square == rhs.square &&
    lhs.cross == rhs.cross &&
    lhs.circle == rhs.circle &&
    lhs.triangle == rhs.triangle &&
    lhs.L1 == rhs.L1 &&
    lhs.L2 == rhs.L2 &&
    lhs.R1 == rhs.R1 &&
    lhs.R2 == rhs.R2 &&
    lhs.option == rhs.option;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pp8::DualShock4ButtonState_<ContainerAllocator1> & lhs, const ::pp8::DualShock4ButtonState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pp8

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pp8::DualShock4ButtonState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pp8::DualShock4ButtonState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp8::DualShock4ButtonState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c13d9931152581a8101d288caaba285";
  }

  static const char* value(const ::pp8::DualShock4ButtonState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c13d9931152581aULL;
  static const uint64_t static_value2 = 0x8101d288caaba285ULL;
};

template<class ContainerAllocator>
struct DataType< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pp8/DualShock4ButtonState";
  }

  static const char* value(const ::pp8::DualShock4ButtonState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# DualShock4 Button State message\n"
"std_msgs/Bool square\n"
"std_msgs/Bool cross\n"
"std_msgs/Bool circle\n"
"std_msgs/Bool triangle\n"
"std_msgs/Bool L1\n"
"std_msgs/Bool L2\n"
"std_msgs/Bool R1\n"
"std_msgs/Bool R2\n"
"std_msgs/Bool option\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::pp8::DualShock4ButtonState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.square);
      stream.next(m.cross);
      stream.next(m.circle);
      stream.next(m.triangle);
      stream.next(m.L1);
      stream.next(m.L2);
      stream.next(m.R1);
      stream.next(m.R2);
      stream.next(m.option);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DualShock4ButtonState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pp8::DualShock4ButtonState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pp8::DualShock4ButtonState_<ContainerAllocator>& v)
  {
    s << indent << "square: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.square);
    s << indent << "cross: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.cross);
    s << indent << "circle: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.circle);
    s << indent << "triangle: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.triangle);
    s << indent << "L1: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.L1);
    s << indent << "L2: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.L2);
    s << indent << "R1: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.R1);
    s << indent << "R2: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.R2);
    s << indent << "option: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.option);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PP8_MESSAGE_DUALSHOCK4BUTTONSTATE_H
