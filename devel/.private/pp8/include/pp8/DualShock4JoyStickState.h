// Generated by gencpp from file pp8/DualShock4JoyStickState.msg
// DO NOT EDIT!


#ifndef PP8_MESSAGE_DUALSHOCK4JOYSTICKSTATE_H
#define PP8_MESSAGE_DUALSHOCK4JOYSTICKSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pp8
{
template <class ContainerAllocator>
struct DualShock4JoyStickState_
{
  typedef DualShock4JoyStickState_<ContainerAllocator> Type;

  DualShock4JoyStickState_()
    : l_x(0.0)
    , l_y(0.0)
    , r_x(0.0)
    , r_y(0.0)  {
    }
  DualShock4JoyStickState_(const ContainerAllocator& _alloc)
    : l_x(0.0)
    , l_y(0.0)
    , r_x(0.0)
    , r_y(0.0)  {
  (void)_alloc;
    }



   typedef double _l_x_type;
  _l_x_type l_x;

   typedef double _l_y_type;
  _l_y_type l_y;

   typedef double _r_x_type;
  _r_x_type r_x;

   typedef double _r_y_type;
  _r_y_type r_y;





  typedef boost::shared_ptr< ::pp8::DualShock4JoyStickState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pp8::DualShock4JoyStickState_<ContainerAllocator> const> ConstPtr;

}; // struct DualShock4JoyStickState_

typedef ::pp8::DualShock4JoyStickState_<std::allocator<void> > DualShock4JoyStickState;

typedef boost::shared_ptr< ::pp8::DualShock4JoyStickState > DualShock4JoyStickStatePtr;
typedef boost::shared_ptr< ::pp8::DualShock4JoyStickState const> DualShock4JoyStickStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pp8::DualShock4JoyStickState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pp8::DualShock4JoyStickState_<ContainerAllocator1> & lhs, const ::pp8::DualShock4JoyStickState_<ContainerAllocator2> & rhs)
{
  return lhs.l_x == rhs.l_x &&
    lhs.l_y == rhs.l_y &&
    lhs.r_x == rhs.r_x &&
    lhs.r_y == rhs.r_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pp8::DualShock4JoyStickState_<ContainerAllocator1> & lhs, const ::pp8::DualShock4JoyStickState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pp8

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pp8::DualShock4JoyStickState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pp8::DualShock4JoyStickState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp8::DualShock4JoyStickState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1dc4bb1b4a2956e5a2e9cdf4c2d8004";
  }

  static const char* value(const ::pp8::DualShock4JoyStickState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1dc4bb1b4a2956eULL;
  static const uint64_t static_value2 = 0x5a2e9cdf4c2d8004ULL;
};

template<class ContainerAllocator>
struct DataType< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pp8/DualShock4JoyStickState";
  }

  static const char* value(const ::pp8::DualShock4JoyStickState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#DualShock4 JoyStick State message\n"
"float64 l_x\n"
"float64 l_y\n"
"float64 r_x\n"
"float64 r_y\n"
;
  }

  static const char* value(const ::pp8::DualShock4JoyStickState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.l_x);
      stream.next(m.l_y);
      stream.next(m.r_x);
      stream.next(m.r_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DualShock4JoyStickState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pp8::DualShock4JoyStickState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pp8::DualShock4JoyStickState_<ContainerAllocator>& v)
  {
    s << indent << "l_x: ";
    Printer<double>::stream(s, indent + "  ", v.l_x);
    s << indent << "l_y: ";
    Printer<double>::stream(s, indent + "  ", v.l_y);
    s << indent << "r_x: ";
    Printer<double>::stream(s, indent + "  ", v.r_x);
    s << indent << "r_y: ";
    Printer<double>::stream(s, indent + "  ", v.r_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PP8_MESSAGE_DUALSHOCK4JOYSTICKSTATE_H
